
#ifndef _principalaxis_h
#define _principalaxis_h

#include "ap.h"

/*-----------------------------------------------
This routines must be defined by you:

double f(ap::real_1d_array x);
-----------------------------------------------*/

/*************************************************************************
Поиск минимума функции N аргументов (N>=2) методом главных направлений.

Исходный код получен путем перевода оригинального кода из языка Fortran.
Автор оригинального кода и алгоритма в целом: Р.П.Брент.

Входные параметры:
    N   -   Размерность задачи. Не меньше 2.
    X   -   массив с нумерацией элементов от 1 до N. Начальная точка.
    T0  -   Требуемая точность. Алгоритм пытается найти такую точку, которая
            отличается от локального минимума не более, чем на
            T0+SquareRoot(MachineEpsilon)*NORM(Minimum).
    H0  -   Максимально допустимая длина шага. Должно по порядку
            соответствовать максимально возможному расстоянию от начальной
            точки до минимума. Если задано слишком большое или слишком маленькое
            значение, начальная скорость сходимости может быть слишком низкой.

Выходные параметры:
    X   -   найденное приближение к минимуму

Результат:
    Значение функции в найденной точке
*************************************************************************/
double principalaxisminimize(const int& n,
     ap::real_1d_array& x,
     const double& t0,
     const double& h0);


double f(ap::real_1d_array x);

#endif
